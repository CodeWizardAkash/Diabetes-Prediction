# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s1RlLKB3r1aZ0tcsBA4qU7SXluWHdVR5
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

from google.colab import drive
drive.mount('/content/drive')

dff = pd.read_csv('/content/drive/My Drive/diabetes.csv')

dff.head()

dff.shape

dff.describe()

dff['Outcome'].value_counts()

dff.groupby("Outcome").mean()

#separating data and lebel
x = dff.drop(columns = 'Outcome', axis=1)
y = dff['Outcome']

x.head()

y.head()

"""Data Standardization"""

scaler = StandardScaler()

scaler.fit(x)

std_data = scaler.transform(x)

x = std_data

print(x)
print(y)

"""Train test split"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.2, stratify=y, random_state=2)

print(len(x_train), len(x_test))
print(len(y_train), len(y_test))

"""**Training the Model**"""

classifier = svm.SVC(kernel = 'linear')

#training the support vector machine Classifier
classifier.fit(x_train, y_train)

"""Accuracy Score"""

#accuracy score on the training data
x_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print('Accuracy score of the training data : ', training_data_accuracy)

#accuracy score on the test data
x_test_prediction = classifier.predict(x_test)
test_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy score of the test data : ',test_data_accuracy)

"""Predictive system"""

input_data = (4,110,92,0,0,37.6,0.191,30)

#changing the input_data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is not diabetic')
else:
  print('The person is diabetic')

from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve
import seaborn as sns
import matplotlib.pyplot as plt

# Confusion matrix
cm = confusion_matrix(y_test, x_test_prediction)
sns.heatmap(cm, annot=True, fmt='d')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

# Classification report
print(classification_report(y_test, x_test_prediction))

# ROC AUC Score
y_probs = classifier.decision_function(x_test)
fpr, tpr, thresholds = roc_curve(y_test, y_probs)
plt.plot(fpr, tpr)
plt.title("ROC Curve")
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.show()

print("ROC AUC Score:", roc_auc_score(y_test, y_probs))

"""**Build an Interactive Web App (Gradio)**"""

import gradio as gr

def predict_diabetes(Pregnancies, Glucose, BloodPressure, SkinThickness,
                     Insulin, BMI, DiabetesPedigreeFunction, Age):
    input_data = np.array([[Pregnancies, Glucose, BloodPressure, SkinThickness,
                            Insulin, BMI, DiabetesPedigreeFunction, Age]])
    std_input = scaler.transform(input_data)
    prediction = classifier.predict(std_input)
    return "Diabetic" if prediction[0] == 1 else "Not Diabetic"

interface = gr.Interface(fn=predict_diabetes,
                         inputs=[
                             gr.Number(label="Pregnancies"),
                             gr.Number(label="Glucose"),
                             gr.Number(label="Blood Pressure"),
                             gr.Number(label="Skin Thickness"),
                             gr.Number(label="Insulin"),
                             gr.Number(label="BMI"),
                             gr.Number(label="Diabetes Pedigree Function"),
                             gr.Number(label="Age")
                         ],
                         outputs=gr.Text(label="Prediction"),
                         title="Diabetes Prediction App")

interface.launch()

import pickle

# Save the trained SVM model
with open('model.pkl', 'wb') as model_file:
    pickle.dump(classifier, model_file)

# Save the scaler used for standardization
with open('scaler.pkl', 'wb') as scaler_file:
    pickle.dump(scaler, scaler_file)

print("Model and scaler saved successfully!")

